[tool:pytest]
minversion = 6.0
addopts = -ra --strict-markers --strict-config --cov=src/darwin --cov-report=term-missing --cov-report=html:htmlcov --cov-report=xml --cov-fail-under=90 --tb=short --maxfail=5 -v
env = LOGFIRE_IGNORE_NO_CONFIG=1
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
norecursedirs = .git .tox dist build *.egg docker scripts .venv venv

# Custom markers for task validation
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow running tests
    external: Tests requiring external services
    task_validation: Tests that validate task completion
    dependency_check: Tests that validate task dependencies
    docker: Tests requiring Docker
    network: Tests requiring network access
    ui_components: UI component tests
    api_integration: API integration tests
    templates: Template system tests
    visualization: Visualization tests
    functionality: Functionality tests
    layout: Layout and responsive design tests
    dependencies: Dependency validation tests
    task_completion: Task completion validation tests

# Test discovery patterns
collect_ignore = setup.py

# Timeout settings
timeout = 300
timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

[coverage:run]
source = src/darwin
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*
    */migrations/*
    */scripts/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
