#!/usr/bin/env bash
#
# Task Master Wrapper Script with Validation Enforcement
#
# This script wraps the task-master command to enforce validation rules:
# - Tasks must pass tests before being marked as complete
# - Dependencies must be satisfied before starting tasks
# - Provides enhanced status reporting with validation info
#
# Usage:
#   ./scripts/tm next                    # Show next task with validation status
#   ./scripts/tm start --id=1.3          # Start task with dependency validation
#   ./scripts/tm complete --id=1.2       # Complete task with test validation
#   ./scripts/tm validate --id=1.3       # Run validation tests for a task
#   ./scripts/tm ready                   # List tasks ready to start
#   ./scripts/tm status                  # Show enhanced status with validation
#

set -euo pipefail

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
VALIDATOR_SCRIPT="$SCRIPT_DIR/validate_task.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a taskmaster project
check_project_setup() {
    if [[ ! -d "$PROJECT_ROOT/.taskmaster" ]]; then
        log_error "Not in a taskmaster project directory"
        exit 1
    fi

    if [[ ! -f "$VALIDATOR_SCRIPT" ]]; then
        log_error "Validator script not found: $VALIDATOR_SCRIPT"
        exit 1
    fi
}

# Run the validator script
run_validator() {
    python3 "$VALIDATOR_SCRIPT" "$@"
}

# Enhanced next command with validation
tm_next() {
    log_info "Finding next task with validation..."

    # Get ready tasks
    echo
    echo "ðŸ“‹ ${BOLD}Ready Tasks:${NC}"
    run_validator --list-ready

    echo
    echo "ðŸ“Š ${BOLD}Project Status:${NC}"
    run_validator --status

    echo
    echo "ðŸŽ¯ ${BOLD}Task Master Recommendation:${NC}"
    task-master next
}

# Start task with validation
tm_start() {
    local task_id=""

    # Parse arguments
    for arg in "$@"; do
        case $arg in
            --id=*)
                task_id="${arg#*=}"
                shift
                ;;
            *)
                # Unknown option
                ;;
        esac
    done

    if [[ -z "$task_id" ]]; then
        log_error "Task ID required. Usage: tm start --id=<task_id>"
        exit 1
    fi

    log_info "Validating task $task_id for start..."

    # Validate task can be started
    if run_validator --task-id="$task_id" --action=start; then
        log_success "Task $task_id started successfully"

        # Update with task-master
        task-master set-status --id="$task_id" --status=in-progress

        echo
        log_info "Next steps for task $task_id:"
        echo "  1. Implement the required functionality"
        echo "  2. Run tests: tm validate --id=$task_id"
        echo "  3. Complete task: tm complete --id=$task_id"
    else
        log_error "Cannot start task $task_id - validation failed"
        exit 1
    fi
}

# Complete task with validation
tm_complete() {
    local task_id=""
    local force=false

    # Parse arguments
    for arg in "$@"; do
        case $arg in
            --id=*)
                task_id="${arg#*=}"
                shift
                ;;
            --force)
                force=true
                shift
                ;;
            *)
                # Unknown option
                ;;
        esac
    done

    if [[ -z "$task_id" ]]; then
        log_error "Task ID required. Usage: tm complete --id=<task_id>"
        exit 1
    fi

    log_info "Validating task $task_id for completion..."

    # Validate task can be completed
    local validator_args="--task-id=$task_id --action=complete"
    if [[ "$force" == true ]]; then
        validator_args="$validator_args --force"
    fi

    if run_validator $validator_args; then
        log_success "Task $task_id validation passed"

        # Update with task-master
        task-master set-status --id="$task_id" --status=done

        log_success "Task $task_id completed successfully"

        echo
        log_info "Checking for newly available tasks..."
        run_validator --list-ready
    else
        log_error "Cannot complete task $task_id - validation failed"
        echo
        log_info "To force completion (not recommended): tm complete --id=$task_id --force"
        exit 1
    fi
}

# Validate task tests
tm_validate() {
    local task_id=""

    # Parse arguments
    for arg in "$@"; do
        case $arg in
            --id=*)
                task_id="${arg#*=}"
                shift
                ;;
            *)
                # Unknown option
                ;;
        esac
    done

    if [[ -z "$task_id" ]]; then
        log_error "Task ID required. Usage: tm validate --id=<task_id>"
        exit 1
    fi

    log_info "Running validation tests for task $task_id..."

    if run_validator --task-id="$task_id" --action=test --verbose; then
        log_success "All tests passed for task $task_id"
        echo
        log_info "Task $task_id is ready for completion"
        echo "  Run: tm complete --id=$task_id"
    else
        log_error "Tests failed for task $task_id"
        echo
        log_info "Review test output above and fix issues before completing the task"
        exit 1
    fi
}

# Show ready tasks
tm_ready() {
    log_info "Tasks ready to start:"
    run_validator --list-ready
}

# Enhanced status
tm_status() {
    log_info "Enhanced project status:"
    echo
    run_validator --status

    echo
    log_info "Ready tasks:"
    run_validator --list-ready
}

# Show help
tm_help() {
    echo "Task Master Wrapper with Validation"
    echo
    echo "Commands:"
    echo "  tm next                    Show next task with validation status"
    echo "  tm start --id=<id>         Start task with dependency validation"
    echo "  tm complete --id=<id>      Complete task with test validation"
    echo "  tm validate --id=<id>      Run validation tests for a task"
    echo "  tm ready                   List tasks ready to start"
    echo "  tm status                  Show enhanced status with validation"
    echo "  tm help                    Show this help"
    echo
    echo "Options:"
    echo "  --force                    Force action without validation (complete only)"
    echo
    echo "Examples:"
    echo "  tm next                    # Show what to work on next"
    echo "  tm start --id=1.3          # Start Docker setup task"
    echo "  tm validate --id=1.3       # Test Docker setup"
    echo "  tm complete --id=1.3       # Complete Docker setup"
    echo
    echo "Original task-master commands are still available:"
    echo "  task-master <command>      # Use original task-master directly"
}

# Main function
main() {
    check_project_setup

    case "${1:-help}" in
        next)
            tm_next "${@:2}"
            ;;
        start)
            tm_start "${@:2}"
            ;;
        complete)
            tm_complete "${@:2}"
            ;;
        validate)
            tm_validate "${@:2}"
            ;;
        ready)
            tm_ready "${@:2}"
            ;;
        status)
            tm_status "${@:2}"
            ;;
        help|--help|-h)
            tm_help
            ;;
        *)
            log_warning "Unknown command: $1"
            echo
            tm_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
